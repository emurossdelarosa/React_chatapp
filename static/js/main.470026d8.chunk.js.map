{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["socket","io","App","_useState","useState","_useState2","_slicedToArray","message","setMessage","_useState3","_useState4","messages","setMessages","useEffect","on","data","prevMessages","concat","_toConsumableArray","React","createElement","map","msg","index","key","onSubmit","e","preventDefault","trim","emit","type","value","onChange","target","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"8NAGMA,EAASC,YAAG,yBAwCHC,MAtCf,WAAe,IAAAC,EACiBC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAAnCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAAAI,EACML,mBAAS,IAAGM,EAAAJ,YAAAG,EAAA,GAArCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAoB5B,OAlBAG,oBAAU,WACRb,EAAOc,GAAG,UAAW,SAACC,GACpBH,EAAY,SAACI,GAAY,SAAAC,OAAAC,YAASF,GAAY,CAAED,SAEjD,IAeDI,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,YACJD,IAAAC,cAAA,WACGT,EAASU,IAAI,SAACC,EAAKC,GAAK,OACvBJ,IAAAC,cAAA,KAAGI,IAAKD,GAAQD,MAGpBH,IAAAC,cAAA,QAAMK,SAhBkB,SAACC,GAC3BA,EAAEC,iBACqB,KAAnBpB,EAAQqB,SACV5B,EAAO6B,KAAK,UAAWtB,GACvBC,EAAW,OAaTW,IAAAC,cAAA,SAAOU,KAAK,OAAOC,MAAOxB,EAASyB,SArBb,SAACN,GAC3BlB,EAAWkB,EAAEO,OAAOF,UAqBhBZ,IAAAC,cAAA,UAAQU,KAAK,UAAS,WCzBfI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAX,EAAA,GAAAY,KAAAD,EAAAE,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH/B,IAAAC,cAACD,IAAMgC,WAAU,KACfhC,IAAAC,cAAClB,EAAG,QAORgC","file":"static/js/main.470026d8.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\n\nconst socket = io('http://localhost:3000');\n\nfunction App() {\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    socket.on('message', (data) => {\n      setMessages((prevMessages) => [...prevMessages, data]);\n    });\n  }, []);\n\n  const handleMessageChange = (e) => {\n    setMessage(e.target.value);\n  };\n\n  const handleMessageSubmit = (e) => {\n    e.preventDefault();\n    if (message.trim() !== '') {\n      socket.emit('message', message);\n      setMessage('');\n    }\n  };\n\n  return (\n    <div>\n      <h1>Chat App</h1>\n      <div>\n        {messages.map((msg, index) => (\n          <p key={index}>{msg}</p>\n        ))}\n      </div>\n      <form onSubmit={handleMessageSubmit}>\n        <input type=\"text\" value={message} onChange={handleMessageChange} />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}